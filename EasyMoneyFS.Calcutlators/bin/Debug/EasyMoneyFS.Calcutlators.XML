<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>EasyMoneyFS.Calcutlators</name></assembly>
<members>
<member name="T:Chessie.Result`2.Bad">
<summary>
 Represents the result of a failed computation.
</summary>
</member>
<member name="T:Chessie.Result`2.Ok">
<summary>
 Represents the result of a successful computation.
</summary>
</member>
<member name="M:Chessie.Result`2.Try(System.Func{`0})">
<summary>
 Executes the given function on a given success or captures the failure
</summary>
</member>
<member name="M:Chessie.Result`2.ToString">
<summary>
 Converts the result into a string.
</summary>
</member>
<member name="M:Chessie.Result`2.Succeed(`0,System.Collections.Generic.IEnumerable{`1})">
<summary>
 Creates a Success result with the given value and the given message.
</summary>
</member>
<member name="M:Chessie.Result`2.Succeed(`0,`1)">
<summary>
 Creates a Success result with the given value and the given message.
</summary>
</member>
<member name="M:Chessie.Result`2.Succeed(`0)">
<summary>
 Creates a Success result with the given value.
</summary>
</member>
<member name="M:Chessie.Result`2.FailWith(`1)">
<summary>
 Creates a Failure result with the given message.
</summary>
</member>
<member name="M:Chessie.Result`2.FailWith(System.Collections.Generic.IEnumerable{`1})">
<summary>
 Creates a Failure result with the given messages.
</summary>
</member>
<member name="T:Chessie.Result`2">
<summary>
 Represents the result of a computation.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Chessie.Trial.TrialBuilder">
<summary>
 Builder type for error handling computation expressions.
</summary>
</member>
<member name="P:Chessie.Trial.trial">
<summary>
 Wraps computations in an error handling computation expression.
</summary>
</member>
<member name="">

</member>
<member name="M:Chessie.Trial.|Pass|Warn|Fail|``2(Chessie.Result{``0,``1})">
<summary>
 Categorizes a result based on its state and the presence of extra messages
</summary>
</member>
<member name="">

</member>
<member name="M:Chessie.Trial.combine``3(Microsoft.FSharp.Collections.FSharpList{Chessie.Result{``0,``1}})">
<summary>
combine the results
</summary>
</member>
<member name="M:Chessie.Trial.collect``2(System.Collections.Generic.IEnumerable{Chessie.Result{``0,``1}})">
<summary>
 Collects a sequence of Results and accumulates their values.
 If the sequence contains an error the error will be propagated.
</summary>
</member>
<member name="M:Chessie.Trial.failureTee``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Core.Unit},Chessie.Result{``1,``0})">
<summary>
 If the result is a Failure it executes the given function on the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.Trial.successTee``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.Unit},Chessie.Result{``0,``1})">
<summary>
 If the result is a Success it executes the given function on the value and the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.Trial.eitherTee``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Core.Unit},Chessie.Result{``0,``1})">
<summary>
 If the result is a Success it executes the given success function on the value and the messages.
 If the result is a Failure it executes the given failure function on the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.Trial.lift2``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Chessie.Result{``0,``3},Chessie.Result{``1,``3})">
<summary>
 Promote a function to a monad/applicative, scanning the monadic/applicative arguments from left to right.
</summary>
</member>
<member name="M:Chessie.Trial.op_LessBangGreater``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Chessie.Result{``0,``2})">
<summary>
 Lifts a function into a Result and applies it on the given result.
 This is the infix operator version of ErrorHandling.lift
</summary>
</member>
<member name="M:Chessie.Trial.lift``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Chessie.Result{``0,``2})">
<summary>
 Lifts a function into a Result container and applies it on the given result.
</summary>
</member>
<member name="M:Chessie.Trial.op_LessMultiplyGreater``3(Chessie.Result{Microsoft.FSharp.Core.FSharpFunc{``0,``1},``2},Chessie.Result{``0,``2})">
<summary>
 If the wrapped function is a success and the given result is a success the function is applied on the value. 
 Otherwise the exisiting error messages are propagated.
 This is the infix operator version of ErrorHandling.apply
</summary>
</member>
<member name="M:Chessie.Trial.apply``3(Chessie.Result{Microsoft.FSharp.Core.FSharpFunc{``0,``1},``2},Chessie.Result{``0,``2})">
<summary>
 If the wrapped function is a success and the given result is a success the function is applied on the value. 
 Otherwise the exisiting error messages are propagated.
</summary>
</member>
<member name="M:Chessie.Trial.op_GreaterGreaterEquals``3(Chessie.Result{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Chessie.Result{``2,``1}})">
<summary>
 If the result is a Success it executes the given function on the value. 
 Otherwise the exisiting failure is propagated.
 This is the infix operator version of ErrorHandling.bind
</summary>
</member>
<member name="M:Chessie.Trial.flatten``2(Chessie.Result{Chessie.Result{``0,``1},``1})">
<summary>
 Flattens a nested result given the Failure types are equal
</summary>
</member>
<member name="M:Chessie.Trial.bind``3(Microsoft.FSharp.Core.FSharpFunc{``0,Chessie.Result{``1,``2}},Chessie.Result{``0,``2})">
<summary>
 If the result is a Success it executes the given function on the value.
 Otherwise the exisiting failure is propagated.
</summary>
</member>
<member name="M:Chessie.Trial.mergeMessages``2(Microsoft.FSharp.Collections.FSharpList{``0},Chessie.Result{``1,``0})">
<summary>
 Appends the given messages with the messages in the given result.
</summary>
</member>
<member name="M:Chessie.Trial.returnOrFail``2(Chessie.Result{``0,``1})">
<summary>
 If the given result is a Success the wrapped value will be returned. 
Otherwise the function throws an exception with Failure message of the result.
</summary>
</member>
<member name="M:Chessie.Trial.either``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},``2},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},``2},Chessie.Result{``0,``1})">
<summary>
 Takes a Result and maps i with fSuccess if it is a Success otherwise it maps it with fFailure.
</summary>
</member>
<member name="">

</member>
<member name="M:Chessie.Trial.changeValue``3(``0,Chessie.Result{``1,``2})">
<summary>
Changes the value of the success
</summary>
</member>
<member name="M:Chessie.Trial.failIfNone``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 Converts an option into a Result.
</summary>
</member>
<member name="M:Chessie.Trial.failed``2(Chessie.Result{``0,``1})">
<summary>
 Returns true if the result was not successful.
</summary>
</member>
<member name="M:Chessie.Trial.fail``2(``1)">
<summary>
 Wraps a message in a Failure
</summary>
</member>
<member name="M:Chessie.Trial.warn``2(``1,``0)">
<summary>
 Wraps a value in a Success and adds a message
</summary>
</member>
<member name="M:Chessie.Trial.pass``2(``0)">
<summary>
 Wraps a value in a Success
</summary>
</member>
<member name="M:Chessie.Trial.ok``2(``0)">
<summary>
 Wraps a value in a Success
</summary>
</member>
<member name="T:Chessie.Trial">
<summary>
 Basic combinators and operators for error handling.
</summary>
</member>
<member name="T:Chessie">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Dates">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Errors.NullError.OvertimeYtdIsNull">
<summary>
Overtime
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Errors">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Utility">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WorkNumberCalc">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WorkNumberExecution">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WorkNumberMapper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WorkNumberRequest">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WorkNumberValidation">

</member>
</members>
</doc>
